<?xml version="1.0"?>
<doc>
    <assembly>
        <name>r6-marketplace</name>
    </assembly>
    <members>
        <member name="P:r6_marketplace.Classes.Orders.Order.Fee">
            <summary>
            For purchase orders this is always 0.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Orders.Order.NetAmount">
            <summary>
            The amount you will receive after selling this item. For purchase orders this is always 0.
            </summary>
        </member>
        <member name="M:r6_marketplace.Classes.Orders.Order.Cancel">
            <summary>
            Cancel this order.
            </summary>
            <param name="orderId">The ID of an order to cancel.</param>
            <returns>For some reason, API always returns an error even if the order was cancelled successfully.
            So right now there is no way to tell if an order was cancelled or not, except retrieving active orders again.</returns>
        </member>
        <member name="T:r6_marketplace.Classes.Orders.HistoryOrder">
            <summary>
            A normal <see cref="T:r6_marketplace.Classes.Orders.Order"/> class with some extra properties.
            </summary>
        </member>
        <member name="F:r6_marketplace.Classes.Orders.HistoryOrder.ExpiresAt">
            <summary>
            <c>Always null.</c> This is a placeholder for the future.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Orders.HistoryOrder.LastModifiedAt">
            <summary>
            Usually the time when the order was filled / cancelled / expired.
            </summary>
        </member>
        <member name="M:r6_marketplace.Classes.Orders.HistoryOrder.Repeat(System.Int32)">
            <summary>
            Place the same order again if it was cancelled / expired. This will NOT work if the order was completed.
            </summary>
            <param name="newPrice">New price if you wish to edit it. Must be between 10 and 1,000,000.
            Leave at 0 to use the same price as before.</param>
            <returns>An instance of <see cref="T:r6_marketplace.Classes.Orders.Order"/> if the order was places successfully.</returns>
        </member>
        <member name="T:r6_marketplace.Classes.ImageUri">
            <summary>
            Represents a URI that points to an image. You can use <see cref="M:r6_marketplace.Classes.ImageUri.DownloadImageAsStream"/> to download the image as a stream
            or <see cref="M:r6_marketplace.Classes.ImageUri.DownloadImageAsFile(System.String)"/> to save it to a file.
            </summary>
        </member>
        <member name="F:r6_marketplace.Classes.ImageUri.Value">
            <summary>
            The URI of the image.
            </summary>
        </member>
        <member name="M:r6_marketplace.Classes.ImageUri.DownloadImageAsStream">
            <summary>
            Download the image as a stream.
            </summary>
        </member>
        <member name="M:r6_marketplace.Classes.ImageUri.DownloadImageAsFile(System.String)">
            <summary>
            Download the image and save it to the specified path.
            </summary>
            <param name="path">The path to save this image to.</param>
        </member>
        <member name="M:r6_marketplace.Classes.Item.Item.ToString">
            <returns>The name of the item.</returns>
        </member>
        <member name="P:r6_marketplace.Classes.Item.Item.Tags">
            <summary>
            Weapon name is usually at index 0, release year/season at index 3, and rarity at index 5.
            I'm not sure about the consistency of this yet, so I don't extract them myself.
            I will probably change it in the future.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.Item.LastSoldAtPrice">
            <summary>
            The price of the last sale. May be -1 if the item hasn't been sold in the past 30 days.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.Item.LastSoldAtTime">
            <summary>
            The time of the last sale. May be null if the item hasn't been sold in the past 30 days.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.Item.SellOrdersStats">
            <summary>
            May be null if there are no sell orders for this item.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.Item.BuyOrdersStats">
            <summary>
            May be null if there are no buy orders for this item.
            </summary>
        </member>
        <member name="M:r6_marketplace.Classes.Item.Item.GetMarketplaceURL(r6_marketplace.Utils.Data.Local)">
            <summary>
            Get a link to the item on the Ubisoft marketplace.
            </summary>
        </member>
        <member name="T:r6_marketplace.Classes.Item.ItemPriceHistory">
            <summary>
            Represents the price history of an item over the past 30 days.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.ItemPriceHistory.AllTimeHigh">
            <summary>
            The highest price at which the item was sold in the past 30 days.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.ItemPriceHistory.AllTimeAverageHigh">
            <summary>
            The highest daily average price of the item in the past 30 days.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.ItemPriceHistory.AllTimeAverageLow">
            <summary>
            The lowest daily average price of the item in the past 30 days.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.ItemPriceHistory.Average">
            <summary>
            The average price of the item in the past 30 days.
            </summary>
        </member>
        <member name="M:r6_marketplace.Classes.Item.ItemPriceHistory.Take(System.Int32)">
            <summary>
            Returns a new <see cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/> containing the first specified number of elements from the
            current history.
            </summary>
            <param name="count">The number of elements to include in the new <see cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/>. Must be non-negative.</param>
            <returns>A new <see cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/> containing up to <paramref name="count"/> elements from the start of
            the current history. If <paramref name="count"/> exceeds the number of elements in the current history, all
            elements are included.</returns>
        </member>
        <member name="M:r6_marketplace.Classes.Item.ItemPriceHistory.Skip(System.Int32)">
            <summary>
            Skips the specified number of entries in the price history and returns a new <see cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/>
            instance.
            </summary>
            <param name="count">The number of entries to skip. Must be non-negative.</param>
            <returns>A new <see cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/> instance containing the remaining entries after skipping the specified
            number. If <paramref name="count"/> is greater than the total number of entries, an empty <see
            cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/> is returned.</returns>
        </member>
        <member name="M:r6_marketplace.Classes.Item.ItemPriceHistory.Where(System.Func{r6_marketplace.Classes.Item.ItemPriceHistoryEntry,System.Boolean})">
            <summary>
            Filters the price history entries based on the specified predicate.
            </summary>
            <param name="predicate">A function to test each entry for a condition. The function should return <see langword="true"/> for entries
            that should be included in the filtered result, and <see langword="false"/> otherwise.</param>
            <returns>A new <see cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/> instance containing the entries that satisfy the specified predicate.</returns>
        </member>
        <member name="M:r6_marketplace.Classes.Item.ItemPriceHistory.OrderBy``1(System.Func{r6_marketplace.Classes.Item.ItemPriceHistoryEntry,``0})">
            <summary>
            Returns a new <see cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/> instance with its entries ordered according to the specified
            key selector.
            </summary>
            <typeparam name="TKey">The type of the key returned by the <paramref name="keySelector"/> function.</typeparam>
            <param name="keySelector">A function to extract a key from each <see cref="T:r6_marketplace.Classes.Item.ItemPriceHistoryEntry"/> for ordering.</param>
            <returns>A new <see cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/> instance containing the entries sorted by the specified key.</returns>
        </member>
        <member name="M:r6_marketplace.Classes.Item.ItemPriceHistory.Reverse">
            <summary>
            Reverses the order of the price history entries.
            </summary>
            <returns>A new <see cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/> instance with the entries in reverse order.</returns>
        </member>
        <member name="T:r6_marketplace.Classes.Item.ItemPriceHistoryEntry">
            <summary>
            Represents a single entry (day) in the item price history.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.ItemPriceHistoryEntry.Date">
            <summary>
            The date of this day.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.ItemPriceHistoryEntry.LowestPrice">
            <summary>
            The lowest price at which the item was sold on this day.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.ItemPriceHistoryEntry.AveragePrice">
            <summary>
            The average price at which the item was sold on this day.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.ItemPriceHistoryEntry.HighestPrice">
            <summary>
            The highest price at which the item was sold on this day.
            </summary>
        </member>
        <member name="P:r6_marketplace.Classes.Item.ItemPriceHistoryEntry.ItemsCount">
            <summary>
            The number of items sold on this day.
            </summary>
        </member>
        <member name="T:r6_marketplace.Classes.Item.PurchasableItem">
            <summary>
            Represents an <see cref="T:r6_marketplace.Classes.Item.Item"/> that can be purchased.
            </summary>
        </member>
        <member name="M:r6_marketplace.Classes.Item.PurchasableItem.Buy(System.Int32)">
            <summary>
            Create a buy order for this item.
            </summary>
            <param name="price">The price to buy this item for. Must be between 10 and 1,000,000.</param>
            <returns>An instance of <see cref="T:r6_marketplace.Classes.Orders.Order"/> if the order was places successfully.</returns>
        </member>
        <member name="M:r6_marketplace.Classes.Item.PurchasableItem.InstantBuy">
            <summary>
            Instantly buy this item for the lowest sell order price.
            </summary>
            <returns>An instance of <see cref="T:r6_marketplace.Classes.Orders.Order"/> if the order was places successfully.</returns>
        </member>
        <member name="T:r6_marketplace.Classes.Item.SellableItem">
            <summary>
            Represents an <see cref="T:r6_marketplace.Classes.Item.Item"/> that can be sold.
            </summary>
        </member>
        <member name="M:r6_marketplace.Classes.Item.SellableItem.Sell(System.Int32)">
            <summary>
            Sell this item.
            </summary>
            <param name="price">The price to sell this item for. Must be between 10 and 1,000,000.</param>
            <returns>An instance of <see cref="T:r6_marketplace.Classes.Orders.Order"/> if the order was places successfully.</returns>
        </member>
        <member name="M:r6_marketplace.Classes.Item.SellableItem.InstantSell(System.Int32)">
            <summary>
            Instantly sell this item for the highest buy order price.
            </summary>
            <param name="offset">Amount to add to or subtract from the base price.</param>
            <returns>An instance of <see cref="T:r6_marketplace.Classes.Orders.Order"/> if the order was places successfully.</returns>
        </member>
        <member name="M:r6_marketplace.Classes.Item.SellableItem.BestPriceSell(System.Int32)">
            <summary>
            Sell the item for 1 credit lower price than the current lowest sell order (undercut the market).
            </summary>
            <param name="offset">Amount to add to or subtract from the base price.</param>
            <returns>An instance of <see cref="T:r6_marketplace.Classes.Orders.Order"/> if the order was places successfully.</returns>
        </member>
        <member name="E:r6_marketplace.R6MarketplaceClient.OnTokenRefreshed">
            <summary>
            Triggered when the token is automatically refreshed.
            </summary>
        </member>
        <member name="M:r6_marketplace.R6MarketplaceClient.SetupTokenRefreshing(System.Boolean)">
            <summary>
            Enable or disable automatic token refreshing.
            </summary>
            <remarks>
            Please note that the token will be refreshed immediately in order to capture the expiration time.
            Also, if you call this method before subscribing to <see cref="E:r6_marketplace.R6MarketplaceClient.OnTokenRefreshed"/>,
            the event won't be triggered for the first time.
            </remarks>
        </member>
        <member name="P:r6_marketplace.R6MarketplaceClient.TokenExpiration">
            <summary>
            The expiration time of the current token.
            </summary>
        </member>
        <member name="P:r6_marketplace.R6MarketplaceClient.isAuthenticated">
            <summary>
            Returns true if the token is not null and the client is ready to process requests.
            Please note: this does NOT guarantee that the token is valid if you passed it manually.
            </summary>
        </member>
        <member name="M:r6_marketplace.R6MarketplaceClient.#ctor(System.Net.Http.HttpClient,System.String)">
            <summary>
            Create a new instance of the R6MarketplaceClient.
            </summary>
            <param name="token">Your Ubisoft account token beginning with "Ubi_v1 t=".
            Mostly used for testing purposes, so as not to reauthenticate many times.</param>
            <param name="httpClient">An <see cref="T:System.Net.Http.HttpClient"/> instance if you wish to use a custom one</param>
        </member>
        <member name="M:r6_marketplace.R6MarketplaceClient.Authenticate(System.String,System.String)">
            <summary>
            Authenticate with email and password.
            </summary>
            <param name="email"></param>
            <param name="password"></param>
            <returns>Your access token.
            It's used internally, but is returned in case you want to save it somewhere.</returns>
        </member>
        <member name="M:r6_marketplace.R6MarketplaceClient.SetHttpClient(System.Net.Http.HttpClient)">
            <summary>
            Change the http client.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:r6_marketplace.Endpoints.AccountEndpointsExtensions.GetTotalValue(System.Collections.Generic.IReadOnlyList{r6_marketplace.Classes.Item.SellableItem})">
            <summary>
            Get the total value of the inventory based on the current lowest price, last sale price, and current lowest buy order price.
            </summary>
            <returns>An <see cref="T:r6_marketplace.Extensions.ItemsExtensions.InventoryValue"/> instance containing all the calculated values.</returns>
        </member>
        <member name="M:r6_marketplace.Endpoints.AccountEndpoints.GetBalance">
            <summary>
            Get the current balance of the account.
            </summary>
            <returns>Your balance, or -1 if an error occured.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:r6_marketplace.Endpoints.AccountEndpoints.GetInventory(System.String,System.Collections.Generic.IEnumerable{System.Enum},r6_marketplace.Endpoints.SearchEndpoints.SortBy,r6_marketplace.Endpoints.SearchEndpoints.SortDirection,System.Int32,System.Int32,r6_marketplace.Utils.Data.Local)" -->
        <member name="M:r6_marketplace.Endpoints.AccountEndpoints.GetInventoryUnrestricted(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},r6_marketplace.Endpoints.SearchEndpoints.SortBy,r6_marketplace.Endpoints.SearchEndpoints.SortDirection,System.Int32,System.Int32,r6_marketplace.Utils.Data.Local)">
            <summary>
            Gets the items from your inventory with optional filtering.
            This method is kept as a fallback in case new filters are introduced that are not yet supported by this package.
            </summary>
            <remarks>
            Direct use of this method is not recommended due to its complexity and lack of type safety.
            Prefer using <see cref="M:r6_marketplace.Endpoints.AccountEndpoints.GetInventory(System.String,System.Collections.Generic.IEnumerable{System.Enum},r6_marketplace.Endpoints.SearchEndpoints.SortBy,r6_marketplace.Endpoints.SearchEndpoints.SortDirection,System.Int32,System.Int32,r6_marketplace.Utils.Data.Local)"/>, which provides enum-based filters and better usability.
            </remarks>
            <returns>A read-only list of matching <see cref="T:r6_marketplace.Classes.Item.SellableItem"/> objects.</returns>
        </member>
        <member name="M:r6_marketplace.Endpoints.AccountEndpoints.GetInventoryValue">
            <summary>
            Gets the total value of the inventory based on the current lowest price, last sale price, and current lowest buy order price.
            </summary>
            <returns>An <see cref="T:r6_marketplace.Extensions.ItemsExtensions.InventoryValue"/> instance containing all the calculated values.</returns>
        </member>
        <member name="M:r6_marketplace.Endpoints.ItemInfoEndpoints.GetItem(System.String,r6_marketplace.Utils.Data.Local)">
            <summary>
            Get item info by its ID.
            </summary>
            <param name="itemId"></param>
            <param name="lang"></param>
            <returns><see cref="T:r6_marketplace.Classes.Item.Item"/> if the item was found, or <c>null</c> if not.</returns>
            <exception cref="T:r6_marketplace.Utils.Exceptions.UnsuccessfulStatusCodeException"></exception>
            <exception cref="T:r6_marketplace.Utils.Exceptions.InvalidTokenException"></exception>
        </member>
        <member name="M:r6_marketplace.Endpoints.ItemInfoEndpoints.GetItemPriceHistory(System.String)">
            <summary>
            Get item price history (past 30 days) by its ID.
            </summary>
            <param name="itemId"></param>
            <returns><see cref="T:r6_marketplace.Classes.Item.ItemPriceHistory"/> if the item was found, or <c>null</c> if not.</returns>
            <exception cref="T:r6_marketplace.Utils.Exceptions.UnsuccessfulStatusCodeException"></exception>
            <exception cref="T:r6_marketplace.Utils.Exceptions.InvalidTokenException"></exception>
        </member>
        <member name="F:r6_marketplace.Endpoints.SearchEndpoints.SortDirection.ASC">
            <summary>
            Ascending / A-Z
            </summary>
        </member>
        <member name="F:r6_marketplace.Endpoints.SearchEndpoints.SortDirection.DESC">
            <summary>
            Descending / Z-A
            </summary>
        </member>
        <member name="M:r6_marketplace.Endpoints.SearchEndpoints.GetSearchTags">
            <summary>
            Returns a list of all the search tags you can use in <see cref="M:r6_marketplace.Endpoints.SearchEndpoints.SearchItem(System.String,System.Collections.Generic.IEnumerable{System.Enum},r6_marketplace.Endpoints.SearchEndpoints.SortBy,r6_marketplace.Endpoints.SearchEndpoints.SortDirection,System.Int32,System.Int32,r6_marketplace.Utils.Data.Local)"/>.
            </summary>
            <returns>An instance of <see cref="T:r6_marketplace.Classes.Tags.Tags"/>.</returns>
        </member>
        <member name="M:r6_marketplace.Endpoints.SearchEndpoints.SearchItem(System.String,System.Collections.Generic.IEnumerable{System.Enum},r6_marketplace.Endpoints.SearchEndpoints.SortBy,r6_marketplace.Endpoints.SearchEndpoints.SortDirection,System.Int32,System.Int32,r6_marketplace.Utils.Data.Local)">
            <summary>
            Search for items in the marketplace with custom filters.
            </summary>
            <param name="name">The name of the item to search for.</param>
            <param name="filters">A collection of <see cref="T:r6_marketplace.Utils.SearchTags"/>.</param>
            <param name="sortBy">The method of sorting.</param>
            <param name="sortDirection">The direction of sorting.</param>
            <param name="limit">The maximum number of items to return. Must be between 0 and 500.</param>
            <param name="offset">The number of items to skip before returning results. Must be non-negative.</param>
            <param name="local">The locale to use for the search results. Defaults to English (en).</param>
            <returns>A read-only list of matching <see cref="T:r6_marketplace.Classes.Item.PurchasableItem"/> objects.</returns>
        </member>
        <member name="M:r6_marketplace.Endpoints.SearchEndpoints.SearchItemUnrestricted(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},r6_marketplace.Endpoints.SearchEndpoints.SortBy,r6_marketplace.Endpoints.SearchEndpoints.SortDirection,System.Int32,System.Int32,r6_marketplace.Utils.Data.Local)">
            <summary>
            Search for items in the marketplace.
            This method is kept as a fallback in case new filters are introduced that are not yet supported by this package.
            </summary>
            <remarks>
            Direct use of this method is not recommended due to its complexity and lack of type safety.
            Prefer using <see cref="M:r6_marketplace.Endpoints.SearchEndpoints.SearchItem(System.String,System.Collections.Generic.IEnumerable{System.Enum},r6_marketplace.Endpoints.SearchEndpoints.SortBy,r6_marketplace.Endpoints.SearchEndpoints.SortDirection,System.Int32,System.Int32,r6_marketplace.Utils.Data.Local)"/>, which provides enum-based filters and better usability.
            </remarks>
            <returns>A read-only list of matching <see cref="T:r6_marketplace.Classes.Item.PurchasableItem"/> objects.</returns>
        </member>
        <member name="M:r6_marketplace.Endpoints.TransactionsEndpoints.GetActiveOrders(System.Int32,System.Int32,r6_marketplace.Utils.Data.Local)">
            <summary>
            Get active buy/sell orders.
            </summary>
            <param name="local">Language to retrieve items' metadata in.</param>
            <param name="limit">I don't really understand why it's here, as you can't have more than 10 active orders at a time anyway.
            But Ubisoft API requires this parameter, so I thought it might be useful to include it here. Must be non-negative.</param>
            <param name="offset">The number of orders to skip before returning results. Must be non-negative.</param>
            <returns>A read-only list of <see cref="T:r6_marketplace.Classes.Orders.Order"/> instances (empty if there are no orders).</returns>
        </member>
        <member name="M:r6_marketplace.Endpoints.TransactionsEndpoints.GetOrdersHistory(System.Int32,System.Int32,r6_marketplace.Utils.Data.Local)">
            <summary>
            Get a history of buy/sell orders.
            </summary>
            <param name="local">Language to retrieve items' metadata in.</param>
            <param name="limit">The number of orders to return. Must be non-negative.</param>
            <param name="offset">The number of orders to skip before returning results. Must be non-negative.</param>
            <returns>A read-only list of <see cref="T:r6_marketplace.Classes.Orders.HistoryOrder"/> instances (empty if there are no orders).</returns>
        </member>
        <member name="M:r6_marketplace.Endpoints.TransactionsEndpoints.CreateSellOrder(System.String,System.Int32,r6_marketplace.Utils.Data.Local)">
            <summary>
            Create a sell order for an item.
            </summary>
            <param name="itemid">The ID of the item.</param>
            <param name="price">The price you want to sell this item for. Must be between 10 and 1000000.</param>
            <returns>An instance of <see cref="T:r6_marketplace.Classes.Orders.Order"/> if the order was places successfully.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:r6_marketplace.Endpoints.TransactionsEndpoints.CreateBuyOrder(System.String,System.Int32,r6_marketplace.Utils.Data.Local)">
            <summary>
            Create a buy order for an item.
            </summary>
            <param name="itemid">The ID of the item.</param>
            <param name="price">The price you want to buy this item for. Must be between 10 and 1000000.</param>
            <returns>An instance of <see cref="T:r6_marketplace.Classes.Orders.Order"/> if the order was places successfully.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:r6_marketplace.Endpoints.TransactionsEndpoints.CancelOrder(System.String)">
            <summary>
            Cancel an order.
            </summary>
            <param name="orderId">The ID of the order.</param>
            <returns>For some reason, API always returns an error even if the order was cancelled successfully.
            So right now there is no way to tell if an order was cancelled or not, except retrieving active orders again.</returns>
        </member>
        <member name="E:r6_marketplace.Events.AccountEvents.OnInventoryItemAdded">
            <summary>
            Triggered when a new item is added to the inventory.
            </summary>
            <remarks>
            The way this item was obtained doesn't matter. Whether that was a packet, a reward or a marketplace purchase.
            <para></para>
            <c>Important:</c> items that are not availaible on the marketplace don't trigger this event.
            </remarks>
            <returns>
            <see cref="T:r6_marketplace.Classes.Item.SellableItem"/> that appeared in the inventory.
            <para></para>
            <c>Note:</c> selling methods will throw an exception if the item was aquired through the marketplace
            because of the 14-day ban.
            </returns>
        </member>
        <member name="E:r6_marketplace.Events.AccountEvents.OnInventoryItemRemoved">
            <summary>
            Triggered when an item is removed from the inventory.
            </summary>
            <remarks>
            I don't really know any way for an item to be removed from your inventory other than being sold on the marketplace.
            </remarks>
            <returns>
            <see cref="T:r6_marketplace.Classes.Item.Item"/> that was removed from the inventory.
            </returns>
        </member>
        <member name="M:r6_marketplace.Events.AccountEvents.SetupInventoryPolling(System.Boolean,System.Int32)">
            <summary>
            Sets up or updates the polling for the inventory change events.
            </summary>
            <param name="enabled">Enable (<c>true</c>) or disable (<c>false</c>) the polling.</param>
            <param name="frequency">Polling interval in seconds.
            Low values (&lt; 3) may cause overlapping calls under certain conditions, so be careful.</param>
        </member>
        <member name="P:r6_marketplace.Extensions.ItemsExtensions.InventoryValue.TotalValue">
            <summary>
            The total value of the inventory based on the current lowest price.
            </summary>
        </member>
        <member name="P:r6_marketplace.Extensions.ItemsExtensions.InventoryValue.TotalValueWithoutFee">
            <summary>
            The total value of the inventory based on the current lowest price minus 10% fees.
            </summary>
        </member>
        <member name="P:r6_marketplace.Extensions.ItemsExtensions.InventoryValue.TotalValueLastSale">
            <summary>
            The total value of the inventory based on the last sale price.
            </summary>
        </member>
        <member name="P:r6_marketplace.Extensions.ItemsExtensions.InventoryValue.TotalValueLastSaleWithoutFee">
            <summary>
            The total value of the inventory based on the last sale price minus 10% fees.
            </summary>
        </member>
        <member name="P:r6_marketplace.Extensions.ItemsExtensions.InventoryValue.TotalValueAutobuy">
            <summary>
            The total value of the inventory based on the current lowest buy order price.
            </summary>
        </member>
        <member name="P:r6_marketplace.Extensions.ItemsExtensions.InventoryValue.TotalValueAutobuyWithoutFee">
            <summary>
            The total value of the inventory based on the current lowest buy order price minus 10% fees.
            </summary>
        </member>
        <member name="M:r6_marketplace.Extensions.ItemsExtensions.InventoryValue.ToString">
            <returns><see cref="P:r6_marketplace.Extensions.ItemsExtensions.InventoryValue.TotalValue"/></returns>
        </member>
        <member name="T:r6_marketplace.Utils.Data.Local">
            <summary>
            Langugage codes for the API. Uncommon ones like jp or ko are not yet supported (by this package, not API).
            </summary>
        </member>
        <member name="F:r6_marketplace.Utils.Data.OrderState.Succeeded">
            <summary>
            Purchased / sold successfully.
            </summary>
        </member>
        <member name="F:r6_marketplace.Utils.Data.OrderState.Failed">
            <summary>
            Most likely cancelled.
            </summary>
        </member>
        <member name="F:r6_marketplace.Utils.SearchTags.Rarity.rarity_superrare">
            <summary>
            This is epic I believe
            </summary>
        </member>
        <member name="M:r6_marketplace.Utils.SearchTags.GetOriginalName(System.String)">
            <summary>
            Returns the original name of a tag, replacing underscores with dashes and removing leading underscores if present.
            May be useful to display the tag in a more readable format.
            </summary>
        </member>
    </members>
</doc>
